# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c5VvqRU3yvXCCWUxPbe560U5i6tQGlxH
"""

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
import numpy as np
import operator 
from operator import itemgetter

def euc_dist(x1, x2):
    return np.sqrt(np.sum((x1-x2)**2))
class KNN:
    def __init__(self, K=3):
        self.K = K
    def fit(self, x_train, y_train):
        self.X_train = x_train
        self.Y_train = y_train
    def predict(self, X_test):
        predictions = []
        for i in range(len(X_test)):
            dist = np.array([euc_dist(X_test[i], x_t) for x_t in self.X_train])
            dist_sorted = dist.argsort()[:self.K]
            neigh_count = {}
            for idx in dist_sorted:
                if self.Y_train[idx] in neigh_count:
                    neigh_count[self.Y_train[idx]] += 1
                else:
                    neigh_count[self.Y_train[idx]] = 1
            sorted_neigh_count = sorted(neigh_count.items(),key=operator.itemgetter(1), reverse=True)
            predictions.append(sorted_neigh_count[0][0])
        return predictions

from sklearn.datasets import load_digits
mnist = load_digits()
print(mnist.data.shape)
print (mnist.images[0])
print(len(mnist.images[0]))
print(mnist.images[0].shape)
plt.gray()
plt.imshow(mnist.images[0])
print(mnist.target)
print(mnist.target.size)

X = mnist.data 
y = mnist.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=123)
print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)

from sklearn.metrics import accuracy_score
kVals = np.arange(3, 60, 2)
accuracies = []
accuracies1 = []
for k in kVals:
  model = KNN(K = k)
  model.fit(X_train, y_train)
  pred = model.predict(X_test)
  acc = accuracy_score(y_test, pred)
  accuracies.append(acc)
  pred1 = model.predict(X_train)
  acc1 = accuracy_score(y_train, pred1)
  accuracies1.append(acc1)
  print("K = "+str(k)+"; Accuracy: "+str(acc))

plt.plot(kVals, accuracies, 'g-', label='Test accuracy')
plt.plot(kVals, accuracies1, 'g--', label='Train accuracy')
plt.legend(['Test accuracy ','Train accuracy'])
plt.xlabel("K Value")
plt.ylabel("Accuracy")
plt.savefig('mnist_model.png')

from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_recall_fscore_support
model = KNN(K = 3)
model.fit(X_train, y_train) 
pred = model.predict(X_train)
precision, recall, fscore, _ = precision_recall_fscore_support(y_train, pred)
print("Precision \n", precision)
print("\nRecall \n", recall)
print("\nF-score \n", fscore)

from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_recall_fscore_support
model = KNN(K = 3)
model.fit(X_train, y_train)
pred = model.predict(X_test)
acc = accuracy_score(y_test, pred)
precision, recall, fscore, _ = precision_recall_fscore_support(y_test, pred)
print("Precision \n", precision)
print("\nRecall \n", recall)
print("\nF-score \n", fscore)